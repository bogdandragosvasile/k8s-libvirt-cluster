---

# Simplified play to handle apt locks (with timeout and debug)
- hosts: all
  become: yes
  tasks:
    - name: Disable unattended-upgrades to prevent lock conflicts
      systemd:
        name: unattended-upgrades
        state: stopped
        enabled: no
      ignore_errors: true  # Ignore if not installed yet

    - name: Log processes holding apt locks (for debugging)
      shell: |
        for lock in /var/lib/apt/lists/lock /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock; do
          if [ -f "$lock" ]; then
            echo "Lock $lock held by PID: $(fuser $lock 2>/dev/null)"
          fi
        done
      register: lock_debug
      ignore_errors: true

    - name: Display lock debug info
      debug:
        msg: "{{ lock_debug.stdout }}"
      when: lock_debug.stdout != ''

    - name: Wait for apt locks to be released (with timeout)
      wait_for:
        path: "{{ item }}"
        state: absent
        timeout: 300  # Fail after 5 minutes if locks persist
      loop:
        - /var/lib/apt/lists/lock
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/cache/apt/archives/lock
      register: lock_wait
      ignore_errors: true  # Proceed to cleanup on timeout

    - name: Forcefully kill stuck apt processes and remove locks on timeout
      shell: |
        for lock in /var/lib/apt/lists/lock /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock; do
          if [ -f "$lock" ]; then
            pid=$(fuser $lock 2>/dev/null)
            if [ ! -z "$pid" ]; then
              kill -9 $pid
            fi
            rm -f $lock
          fi
        done
      when: lock_wait.failed
      ignore_errors: true

    - name: Repair dpkg database after cleanup
      command: dpkg --configure -a
      ignore_errors: true

- name: Initial setup
  import_playbook: 01-initial.yaml

- name: Install packages
  import_playbook: 02-packages.yaml

- name: Load balancer setup
  import_playbook: 03-lb.yaml

- name: Kubernetes setup
  import_playbook: 04-k8s.yaml

- name: Control plane setup
  import_playbook: 05-control-plane.yaml

- name: Worker setup
  import_playbook: 06-worker.yaml

- name: Kubernetes config
  import_playbook: 07-k8s-config.yaml
