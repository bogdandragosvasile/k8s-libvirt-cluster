---
- name: Generate fresh join command for workers
  hosts: control_plane_init
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: Generate fresh join command
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: join_command_raw
      
    - name: Set join command fact
      ansible.builtin.set_fact:
        worker_join_command: "{{ join_command_raw.stdout }}"

- name: Join worker nodes to cluster
  hosts: workers
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: Wait for API server availability
      ansible.builtin.wait_for:
        host: "{{ VIRTUAL_IP }}"
        port: "{{ K8S_API_SERVER_PORT }}"
        delay: 10
        timeout: 300

    - name: Check if worker is already joined
      ansible.builtin.stat:
        path: /var/lib/kubelet/config.yaml
      register: kubelet_config

    - name: Join worker to cluster
      ansible.builtin.shell: "{{ hostvars[groups['control_plane_init'][0]].worker_join_command }}"
      when: not kubelet_config.stat.exists
      register: join_result
      
    - name: Display join result
      ansible.builtin.debug:
        msg: "{{ join_result.stdout }}"
      when: join_result is defined and join_result.stdout is defined
      
    - name: Verify kubelet is running
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true

    - name: Wait for kubelet to be healthy
      ansible.builtin.pause:
        seconds: 30

- name: Verify worker nodes joined successfully
  hosts: control_plane_init
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: Get cluster nodes
      ansible.builtin.shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes
      register: cluster_nodes
      
    - name: Display all cluster nodes
      ansible.builtin.debug:
        msg: "{{ cluster_nodes.stdout }}"
